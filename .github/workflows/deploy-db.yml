###########################################################
# 1. Terraform & Provider
###########################################################
terraform {
  required_version = ">= 1.0.0"

  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }
}

provider "aws" {
  region = "us-east-1"
}

###########################################################
# 2. Variáveis
###########################################################
variable "db_name" {
  type        = string
  description = "Nome do banco de dados RDS."
  default     = "fastfooddb"
}

variable "db_username" {
  type        = string
  description = "Usuário do banco de dados RDS."
  default     = "admin"
}

variable "db_password" {
  type        = string
  description = "Senha do banco de dados RDS."
  sensitive   = true
  default     = "Alterar@Senha123"
}

variable "vpc_id" {
  type        = string
  description = "ID da VPC onde o RDS será criado."
}

variable "sg_id" {
  type        = string
  description = "ID de um Security Group que permita acesso na porta 5432."
}

variable "subnet_ids" {
  type        = list(string)
  description = "Lista de subnets (na mesma VPC) para o DB Subnet Group."
}

###########################################################
# 3. Verifica se Subnet Group (fastfood-db-subnet) já existe
###########################################################
data "aws_db_subnet_group" "existing_db_subnet" {
  name = "fastfood-db-subnet"
}

###########################################################
# 4. Cria Subnet Group se não existir
###########################################################
resource "aws_db_subnet_group" "fastfood_db_subnet" {
  count       = length(data.aws_db_subnet_group.existing_db_subnet.id) > 0 ? 0 : 1
  name        = "fastfood-db-subnet"
  subnet_ids  = var.subnet_ids
  description = "Managed by Terraform"

  tags = {
    Name = "fastfood-db-subnet-group"
  }
}

###########################################################
# 5. Verifica se Secret (fastfood-db-password) já existe
###########################################################
data "aws_secretsmanager_secret" "existing_db_password_secret" {
  name = "fastfood-db-password"
}

###########################################################
# 6. Cria Secret se não existir
###########################################################
resource "aws_secretsmanager_secret" "db_password_secret" {
  count = length(data.aws_secretsmanager_secret.existing_db_password_secret.id) > 0 ? 0 : 1
  name  = "fastfood-db-password"
}

###########################################################
# 7. Locals para escolher SubnetGroup/Secret (já existe vs. criado)
###########################################################
locals {
  db_subnet_name = length(data.aws_db_subnet_group.existing_db_subnet.id) > 0
    ? data.aws_db_subnet_group.existing_db_subnet.id
    : aws_db_subnet_group.fastfood_db_subnet[0].name

  secret_id = length(data.aws_secretsmanager_secret.existing_db_password_secret.id) > 0
    ? data.aws_secretsmanager_secret.existing_db_password_secret.id
    : aws_db_secretsmanager_secret.db_password_secret[0].id
    # ↑ CORREÇÃO: "aws_secretsmanager_secret" em vez de "aws_db_secretsmanager_secret"
    # Se seu resource chama "aws_secretsmanager_secret.db_password_secret"
    # verifique o nome exato.
}

###########################################################
# 8. Cria a versão do Secret (armazena db_password)
###########################################################
resource "aws_secretsmanager_secret_version" "db_password_version" {
  secret_id     = local.secret_id
  secret_string = var.db_password
}

###########################################################
# 9. RDS PostgreSQL (publicly_accessible)
###########################################################
resource "aws_db_instance" "fastfood_db" {
  allocated_storage    = 20
  storage_type         = "gp2"
  engine               = "postgres"
  engine_version       = "16"
  instance_class       = "db.t3.micro"
  identifier           = "fastfood-db"

  db_name              = var.db_name
  username             = var.db_username
  password             = var.db_password

  # Se quiser conectar de fora, deve ser "true"
  publicly_accessible  = true
  skip_final_snapshot  = true

  # Usa o SG passado (TEM que abrir porta 5432 para seu IP)
  vpc_security_group_ids = [ var.sg_id ]

  # Usa Subnet Group (já existente ou criado)
  db_subnet_group_name   = local.db_subnet_name

  tags = {
    Project     = "FastFood"
    Environment = "DEV"
  }
}

###########################################################
# 10. Output: Endpoint
###########################################################
output "db_endpoint" {
  description = "Endpoint do RDS"
  value       = aws_db_instance.fastfood_db.endpoint
}
